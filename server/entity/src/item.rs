//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title_id: Uuid,
    pub name: String,
    pub product_code: Option<String>,
    pub sku: Option<i32>,
    pub illust_status: String,
    pub pic_illust_id: Option<Uuid>,
    pub design_status: String,
    pub pic_design_id: Option<Uuid>,
    pub maker_id: Option<Uuid>,
    pub retail_price: Option<i32>,
    pub double_check_person_id: Option<Uuid>,
    pub deleted: bool,
    pub resubmission: bool,
    pub line: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::worker::Entity",
        from = "Column::DoubleCheckPersonId",
        to = "super::worker::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Worker3,
    #[sea_orm(
        belongs_to = "super::maker::Entity",
        from = "Column::MakerId",
        to = "super::maker::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Maker,
    #[sea_orm(
        belongs_to = "super::worker::Entity",
        from = "Column::PicDesignId",
        to = "super::worker::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Worker2,
    #[sea_orm(
        belongs_to = "super::worker::Entity",
        from = "Column::PicIllustId",
        to = "super::worker::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Worker1,
    #[sea_orm(
        belongs_to = "super::title::Entity",
        from = "Column::TitleId",
        to = "super::title::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Title,
}

impl Related<super::maker::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Maker.def()
    }
}

impl Related<super::title::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Title.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
